setwd('/tmp')
load('pdSummary.RData')

load('dfHibr.RData')

dfHibr <- df2PD(dfHibr)

library(pdCluster)
remotes::install_github('oscarperpinan/pdcluster')
library(pdCluster)
load('dfHibr.RData')

dfHibr <- df2PD(dfHibr)

dfFilter <- filterPD(dfHibr)

dfTrans <- transformPD(dfFilter)

nZCbefore <- as.data.frame(dfFilter)$nZC
nZCafter <- as.data.frame(dfTrans)$nZC
comp <- data.frame(After=nZCafter, Before=nZCbefore)
h <- histogram(~After+Before, data=comp,
          scales=list(x=list(relation='free'),
            y=list(relation='free',
              draw=FALSE)),
          breaks=100, col='gray',
          xlab='',
          strip.names=c(TRUE, TRUE), bg='gray', fg='darkblue')
h
dfTransSubset <- subset(dfTrans, 
                        subset=(angle >= 90 & angle <=180), 
                        select=c(energy, W1, nZC))
dfTrans
dfTrans@angle
showMethods(load('pdSummary.RData')

idxOrderSummary=order(pdSummary$sumaCuadrados)
idxOrderData=order(pdData$energy)

pdDataOrdered=cbind(pdData[idxOrderData,], 
pdSummary[idxOrderSummary,c('angulo', 'separacionOriginal')])

idx <- do.call(order, pdSummary[idxOrderSummary, c('segundo', 'inicio')])
pdDataOrdered <- pdDataOrdered[idx,]

pd <- df2PD(pdDataOrdered))
load('pdSummary.RData')

idxOrderSummary=order(pdSummary$sumaCuadrados)
idxOrderData=order(pdData$energy)

pdDataOrdered=cbind(pdData[idxOrderData,], 
pdSummary[idxOrderSummary,c('angulo', 'separacionOriginal')])

idx <- do.call(order, pdSummary[idxOrderSummary, c('segundo', 'inicio')])
pdDataOrdered <- pdDataOrdered[idx,]

pd <- df2PD(pdDataOrdered)
load('signalList.RData')

xyplot(signalList, y.same=NA, FUN=function(x){xyplot(ts(no0(x)))})

signal <- signalList[[3]]
pr <- prony(signal, M=10)
xyplot(pr)

compProny(signal, M=c(10, 20, 30, 40))

analysis(signal)

analysisList <- lapply(signalList[1:10], analysis)
pdData <- do.call(rbind, analysisList)

load('pdSummary.RData')

idxOrderSummary=order(pdSummary$sumaCuadrados)
idxOrderData=order(pdData$energy)

pdDataOrdered=cbind(pdData[idxOrderData,], 
pdSummary[idxOrderSummary,c('angulo', 'separacionOriginal')])

idx <- do.call(order, pdSummary[idxOrderSummary, c('segundo', 'inicio')])
pdDataOrdered <- pdDataOrdered[idx,]

pd <- df2PD(pdDataOrdered)

load('dfHibr.RData')

dfHibr <- df2PD(dfHibr)

dfFilter <- filterPD(dfHibr)

dfTrans <- transformPD(dfFilter)

nZCbefore <- as.data.frame(dfFilter)$nZC
nZCafter <- as.data.frame(dfTrans)$nZC
comp <- data.frame(After=nZCafter, Before=nZCbefore)


load('signalList.RData')

xyplot(signalList, y.same=NA, FUN=function(x){xyplot(ts(no0(x)))})

signal <- signalList[[3]]
pr <- prony(signal, M=10)
xyplot(pr)

compProny(signal, M=c(10, 20, 30, 40))

analysis(signal)

analysisList <- lapply(signalList[1:10], analysis)
pdData <- do.call(rbind, analysisList)

load('pdSummary.RData')

idxOrderSummary=order(pdSummary$sumaCuadrados)
idxOrderData=order(pdData$energy)

pdDataOrdered=cbind(pdData[idxOrderData,], 
pdSummary[idxOrderSummary,c('angulo', 'separacionOriginal')])

idx <- do.call(order, pdSummary[idxOrderSummary, c('segundo', 'inicio')])
pdDataOrdered <- pdDataOrdered[idx,]

pd <- df2PD(pdDataOrdered)

load('dfHibr.RData')

dfHibr <- df2PD(dfHibr)

dfFilter <- filterPD(dfHibr)

dfTrans <- transformPD(dfFilter)

nZCbefore <- as.data.frame(dfFilter)$nZC
nZCafter <- as.data.frame(dfTrans)$nZC
comp <- data.frame(After=nZCafter, Before=nZCbefore)


load('signalList.RData')

xyplot(signalList, y.same=NA, FUN=function(x){xyplot(ts(no0(x)))})

signal <- signalList[[3]]
pr <- prony(signal, M=10)
xyplot(pr)

compProny(signal, M=c(10, 20, 30, 40))

analysis(signal)

analysisList <- lapply(signalList[1:10], analysis)
pdData <- do.call(rbind, analysisList)

load('pdSummary.RData')

idxOrderSummary=order(pdSummary$sumaCuadrados)
idxOrderData=order(pdData$energy)

pdDataOrdered=cbind(pdData[idxOrderData,], 
pdSummary[idxOrderSummary,c('angulo', 'separacionOriginal')])

idx <- do.call(order, pdSummary[idxOrderSummary, c('segundo', 'inicio')])
pdDataOrdered <- pdDataOrdered[idx,]

pd <- df2PD(pdDataOrdered)

load('dfHibr.RData')

dfHibr <- df2PD(dfHibr)

dfFilter <- filterPD(dfHibr)

dfTrans <- transformPD(dfFilter)

nZCbefore <- as.data.frame(dfFilter)$nZC
nZCafter <- as.data.frame(dfTrans)$nZC
comp <- data.frame(After=nZCafter, Before=nZCbefore)


dfTransSubset <- subset(dfTrans, 
                        subset=(angle >= 90 & angle <=180), 
                        select=c(energy, W1, nZC))
library(latticeExta)
library(latticeExtra)
install.packages("pdCluster", repos="http://R-Forge.R-project.org")

n
library(pdCluster)
setwd('docs')
hexbinplot
dfTransCluster
library(pdCluster)
xyplot(dfTrans)
xyplot(dfTransCluster)
dfTransCluster@data
          definition <- function(x,
                                 distances, clusters,
                                 plot.refl=TRUE,
                                 panelClust=TRUE,
                                 yvar = 'energy',
                                 ...
                                 ){
            if (missing(distances)) distances <- seq_along(levels(factor(x@dist$distFactor)))
            if (missing(clusters)) clusters <- seq_along(levels(factor(x@cluster)))
            dt <- as.data.frame(x)
            settings <- list(xlab='phase', ylab=yvar,
                             alpha=0.2,
                             xscale.components=angleScale,
                             auto.key=list(space='right',
                               cex.title=0.8,
                               lines=FALSE, points=TRUE, cex=1),
                             strip=strip.custom(strip.names=c(TRUE, TRUE),
                               strip.levels=c(TRUE, TRUE), bg='gray'))
            call <- modifyList(settings, list(...))           
            call$data=subset(dt, (distFactor %in% distances) & (cluster %in% clusters))
            if (panelClust){
              call$auto.key$title <- 'Distance\nto Medoid'
                              call$groups=call$data$distFactor
                call$par.settings <- custom.theme.4
              if (x@refl.rm==FALSE & plot.refl==TRUE){ ##muestro los reflejos en paneles separados
                call$x <- as.formula(paste(yvar, '~ angle | cluster + refl'))
                px <- do.call(xyplot, call)
                p <- useOuterStrips(px,
                                    strip=strip.custom(strip.names=c(TRUE, TRUE),
                                      strip.levels=c(TRUE, TRUE), bg='gray'),
                                    strip.left=strip.custom(strip.levels=c(TRUE, TRUE),
                                      strip.names=c(TRUE, TRUE), bg='gray')
                                    )
              } else { ##todo junto
                call$x <- as.formula(paste(yvar, '~ angle | cluster'))
                p <- do.call(xyplot, call)
              }  
            } else { ##end of panelClust==TRUE
              call$auto.key$title <- 'Clusters'
              call$groups=call$data$cluster
              call$par.settings <- pd.theme
              if (plot.refl & !x@refl.rm){ ##muestro los reflejos en paneles separados
                call$x <- as.formula(paste(yvar, '~ angle | refl'))
                p <- do.call(xyplot, call)
              } else { ##todo junto
                call$x <- as.formula(paste(yvar, '~ angle'))
                p <- do.call(xyplot, call)
              }
            }
            p$panel <- pdPanel
            for(i in seq_along(p$panel.args)) p$panel.args[[i]]$yvar <- dt[[yvar]]
            print(p)
          }

definition
definition(dfTransCluster)
debug(definition)
definition(dfTransCluster)
x <- dfTransCluster
as(dfTransCluster, 'PD')
xx <- as(dfTransCluster, 'PD')
class(xx)
as.data.frame(xx)
xx@data
dim(xx@data)
class(xx@data)
dim(xx@angle)
dim(xx@key)
df <- xx@data
df$angle <- xx@angle
df$refl <- xx@refl
df$key <- xx@key
xx@key
length(xx@key)
dfTransCluster@key
install.packages("pdCluster", repos="http://R-Forge.R-project.org")
install.packages("pdCluster", repos="http://R-Forge.R-project.org")
n
remotes::install_github('oscarperpinan/pdcluster')
n
library(pdCluster)
dfTransCluster@key
length(dfTransCluster@key)
length(dfTransCluster@refl)
length(dfTrans@refl)
show
showMethods('claraPD', 'PD')
showMethods('claraPD', signature = 'PD')
getMethod('claraPD', signature = 'PD')
remotes::install_github('oscarperpinan/pdcluster')
dfTransCluster@key
length(dfTransCluster@key)
          definition <- function(object,
                                 vars, useAngle = TRUE,
                                 nSims=25, nCl=7, metric='manhattan',
                                 noise.level=0.7, noise.rm=TRUE,
                                 seed=421){
    dt <- object@data
    ##Include angle as another feature for clara
    if (isTRUE(useAngle)) dt$angle <- object@angle 
    ## Preparo matrices
    set.seed(seed)              # (reproducibility)
    cl <- matrix(NA, nrow(dt), nSims)
    medoids <- array(NA, c(nCl, ncol(dt), nSims))
    ## Ejecuto simulaciones de CLARA
    for(i in 1:nSims){
        claraSim <- clara(dt, nCl,
                          stand=TRUE, metric=metric,
                          medoids.x = TRUE, rngR = TRUE)
        cl[,i] <- claraSim$cluster
        medoids[,,i] <- as.matrix(dt[claraSim$i.med,])
    }
    ## En base a todas las simulaciones establezco las agrupaciones finales
    ## y decido las muestras que son "ruido"
    tcl <- apply(cl, 1, tabulate, nbins = nCl)
    timesCl <- t(tcl)/nSims
    noise <- apply(timesCl, 1, function(x)!any(x>noise.level))
    fuzzyCl <- apply(timesCl, 1, which.max)
    ## Calculo los centroides promedio
    ##y las distancias asociadas para cada cluster
    meanMedoids <- apply(medoids, c(1, 2), mean)
    distancia <- function(x, y){sqrt(sum((x-y)^2))}
    distFoo <- function(i, data){
        x1 <- apply(data[fuzzyCl==i,], 1, FUN=distancia, y=meanMedoids[i,])
    }
    distMedoid <- do.call(c, lapply(1:nCl, distFoo, dt))
    distRel <- ave(distMedoid, fuzzyCl,
                   FUN=function(x)1-x/max(x)) ##distancia relativa por cluster
    distFactor <- ave(distRel,  fuzzyCl,
                      FUN = function(x){
                          brks <- quantile(x, seq(0.1, 1, 0.1))
                          cut(x, unique(brks))
                      })
    distDF <- data.frame(dist=distMedoid,
                         distRel=distRel,
                         distFactor=distFactor)
    ##Entrego resultados
    if (!('energy' %in% names(dt))) ##energy must be in the output
            dt$energy <- object@data$energy
    
    if(noise.rm){
        object@angle <- object@angle[!noise]
        object@refl <- object@refl[!noise]
        object@key <- object@key[!noise]
        dt <- dt[!noise,]
        fuzzyCl <- fuzzyCl[!noise]
        distDF <- distDF[!noise,]
    }
    object@data <- dt
    result <- new(Class='PDCluster',
                  object, ##PDCluster contains a PD object
                  cluster=fuzzyCl,
                  nSims=nSims,
                  nClusters=nCl,
                  metric=metric,
                  noise.level=noise.level,
                  noise.rm=noise.rm,
                  dist=distDF)
    result
}

xx_
xx <- definition(dfTrans, noise.level = 0.7, noise.rm = TRUE)
xx@key
n
